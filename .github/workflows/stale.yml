name: "Mark and close stale bug issues"

on:
  schedule:
    - cron: "0 0 * * *" # Runs daily at midnight
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  stale:
    runs-on: ubuntu-latest
    steps:
      - name: Enable debug logging
        run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mark and close stale bug issues
        uses: actions/github-script@v7
        with:
          script: |
            const daysBeforeStale = 1;  // Number of days to consider an issue stale
            const daysBeforeClose = 1;  // Number of days after being marked stale to close
            const staleLabel = 'stale';  // Label to apply to stale issues
            const targetLabel = 'bug';  // Only target issues with this label
            const excludeLabel = 'tracked';  // Exclude issues with this label
            const specificUser = 'alloydsa';  // The specific user who must have commented
            const specificOrg = 'NetApp-openstack-dev'; //

            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: targetLabel,
              per_page: 100,
            });

            const now = new Date();

            for (const issue of issues) {
              // Check if the issue has the exclude label
              if (issue.labels.some(label => label.name === excludeLabel)) {
                continue;
              }

              // Check if the specific user has commented
              const comments = await github.paginate(github.rest.issues.listComments, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
              });

              let orgUserCommented = false;

              for (const comment of comments) {
                const user = comment.user.login;
                try {
                  const userOrgs = await github.paginate(github.rest.orgs.listForUser, {
                    username: user,
                  });

                  if (userOrgs.some(org => org.login === specificOrg)) {
                    orgUserCommented = true;
                    break;
                  }
                } catch (error) {
                  console.error(`Failed to fetch organizations for user ${user}:`, error);
                }
              }

              if (orgUserCommented) {
                const lastUpdated = new Date(issue.updated_at);
                const daysSinceUpdate = (now - lastUpdated) / (1000 * 60 * 60 * 24);

                #                 // Check if the issue has been marked stale for the required daysBeforeClose
                # if (daysSinceUpdate > (daysBeforeStale + daysBeforeClose)) {
                #   const updatedIssue = await github.rest.issues.get({
                #     owner: context.repo.owner,
                #     repo: context.repo.repo,
                #     issue_number: issue.number,
                #   });

                #   if (updatedIssue.data.labels.some(label => label.name === staleLabel)) {
                #     await github.rest.issues.update({
                #       owner: context.repo.owner,
                #       repo: context.repo.repo,
                #       issue_number: issue.number,
                #       state: 'closed',
                #     });

                #     // Post a close comment
                #     await github.rest.issues.createComment({
                #       owner: context.repo.owner,
                #       repo: context.repo.repo,
                #       issue_number: issue.number,
                #       body: "This issue has been closed due to inactivity."
                #     });
                #     break;
                #   }
                # }

                if (daysSinceUpdate > daysBeforeStale) {
                  // Mark the issue as stale
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: [staleLabel],
                  });

                  // Post a stale warning comment
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: "This issue has been automatically marked as stale due to inactivity. If no further activity occurs, it will be closed in 1 days."
                  });
                }


              }
            }
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
